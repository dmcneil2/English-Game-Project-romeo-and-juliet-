<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// START CLIENT

//Set up a buffer for the client.
buffer = buffer_create(256, buffer_grow, 1);

//Create a udp socket.
client = network_create_socket(network_socket_udp);

//Get IP
server_ip = get_string("Server IP:","");

//We can also connect directly instead of trying holepunching.
//this should be used for local connections as hole punching is not neccesary or possible
//with the master server.
var directconnect = show_question("Should we connect directly without hole punching?");
//The client will always fall back to direct connect if the master server has no entry
//on this server.
//TODO: Currently the client will freeze when the master server does not respond. With an upcoming
//      update the client will also fall back to directconnect, when the master server
//      does not respond. The client falls back to directconenct if the master server is
//      not reachable at all though!

//We need the port when we are connecting directly
if (directconnect) {
    directconnect_port = real(get_string("Port:","6510"));
} else directconnect_port = 0;

//Okay great! Let's set up the hole punching stuff.
client_id = udphp_createClient(client,            //udp socket     A UDP socket created with network_create_socket
                               server_ip,         //string         The IP of the server to connect to
                               buffer,            //buffer         A buffer that will be used to send data
                               directconnect,     //boolean        If true, holepunching will be skipped and we attempt to connect to the server directl
                               directconnect_port);//&lt;see udphp_createClient&gt;
if (client_id &lt; 0) {
    //Client could not be created. Destroy instace. UDPHP will also show a message.
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RUN HOLE-PUNCHING RELATED LOGIC
if (!udphp_clientPunch(client_id)) {
    //When this returns false, the connection failed or the client was destroyed.
    show_message("Connection failed (or client stopped)!");
    udphp_handleerror(udphp_dbglvl.DEBUG, udphp_dbgtarget.CLIENT, client_id, "Connection failed (or client stopped)!");
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// if connected: Send hello world to server

//First: Display that we live
global.demo_clients += "#CLIENT "+string(client_id)+": running";

//This loop will loop through all players
if (udphp_clientIsConnected(client_id)) {
    buffer_seek(buffer, buffer_seek_start, 0);
    //10 is the id for the hello world demo server commands. We didn't put this in the
    //constants.
    buffer_write(buffer, buffer_s8, 10);
    network_send_udp(client,udphp_clientGetServerIP(client_id),udphp_clientGetServerPort(client_id), buffer, buffer_tell(buffer) );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RUN HOLE-PUNCHING RELATED LOGIC
udphp_clientNetworking(client_id);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Retrieve hello world from server

var in_ip = ds_map_find_value(async_load, "ip");
var in_id = ds_map_find_value(async_load, "id");
var in_port = ds_map_find_value(async_load, "port");
var in_buff = ds_map_find_value(async_load, "buffer");

//Only continue, if this packet is for this client and from server
if (in_id != client or in_ip != udphp_clientGetServerIP(client_id)) exit;

//Check command
switch buffer_read(in_buff, buffer_s8 ) {
    case 10:
        global.demo_clients += "#CLIENT "+string(client_id)+": Server says hello";
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
