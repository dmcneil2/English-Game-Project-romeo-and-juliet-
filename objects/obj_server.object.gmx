<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// START SERVER

//Make sure there is no server running:
if (instance_number(obj_server) &gt; 1) {instance_destroy(); exit;}

//Set up a buffer for the server and a list to hold the player.
player_list = ds_list_create();
buffer = buffer_create(256, buffer_grow, 1);

//Create a udp server and listen on port, first ask for port
var port = real(get_string("On which port should the server listen?","6510"));
server = network_create_server(network_socket_udp,port,32);

//Okay great! Let's set up the hole punching stuff.
ret = udphp_createServer(server,      //udp server    A UDP Server created with network_create_server
                         buffer,      //buffer         A buffer that will be used to send data
                         player_list);//ds_list        A list that players will be saved to. Use this to get the connected clients. Entries can be parsed with udphp_playerListIP and udphp_playerListPort
if (!ret) {
    //Server could not be created. Destroy instace. GMnet PUNCH will also show a message.
    instance_destroy();
}
//Set the 8 data strings. These are used for the lobby and can also be
//retrived by connected clients using udphp_clientReadData().
udphp_serverSetData(1,"gmnet_punch_122"); //1 is reserved for game name and version! Change it when making your own game!
udphp_serverSetData(2,"GMnet PUNCH demo Server"); //2 is used for game name in our demo lobby
udphp_serverSetData(3,"This is a GMnet PUNCH demo server!"); //3 is used for game description in our demo lobby
//4-8 are unused by the demo.

//When you need to change this data after the server has already conncted to
//the master server, see udphp_serverCommitData();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RUN HOLE-PUNCHING RELATED LOGIC
udphp_serverPunch();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send hello world to all connected clients

//First: Display that we live
global.demo_server += "#SERVER: running";

//This loop will loop through all players
for (var i=0;i&lt;ds_list_size(player_list);i++) {
    var player = ds_list_find_value(player_list,i);
    var player_ip = udphp_playerListIP(player);
    var player_port = udphp_playerListPort(player);
    
    buffer_seek(buffer, buffer_seek_start, 0);
    //10 is the id for the hello world demo server commands. We didn't put this in the
    //constants.
    buffer_write(buffer, buffer_s8, 10);
    network_send_udp(server,player_ip, player_port, buffer, buffer_tell(buffer) );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RUN HOLE-PUNCHING RELATED LOGIC
udphp_serverNetworking();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Retrieve hello world from clients

var in_buff = ds_map_find_value(async_load, "buffer");
var in_ip = ds_map_find_value(async_load, "ip");
var in_port = ds_map_find_value(async_load, "port");
var in_id = ds_map_find_value(async_load, "id");

//Only continue, if this packet is for this server
if (in_id != server) exit;

//Check command
switch buffer_read(in_buff, buffer_s8 ) {
    case 10:
        //We should check if this player is actually already connected, but we are skipping that for this demo
        global.demo_server += "#S: "+in_ip+":"+string(in_port)+" says hello";
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
